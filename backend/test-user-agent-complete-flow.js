// test-user-agent-complete-flow.js
// Comprehensive test simulating a user agent answering all questions through the complete flow
// This test will go through background questions, main questions, and follow-ups

import axios from 'axios';

// Test configuration
const BASE_URL = 'http://localhost:3000';
const TEST_SESSION_ID = 'test-user-agent-flow-' + Date.now();

// Sample user responses for each question type
const userResponses = {
  // Background questions
  background: [
    "I studied Computer Science at UCLA, focusing on artificial intelligence and machine learning. I graduated in 2022 with a 3.8 GPA and completed several research projects on natural language processing.",
    "I currently work as a Software Engineer at a tech startup in Silicon Valley. I got into this role through a series of job interviews where I used various preparation techniques, including some AI tools to help me practice and refine my responses.",
    "I first got interested in using GenAI tools like ChatGPT and Gemini for job interviews when I was struggling with interview anxiety. A friend suggested using AI to practice common interview questions, and I found it really helpful for building confidence and improving my communication skills."
  ],
  
  // Main questions
  main: [
    "I used GenAI to help prepare for a job interview at Google. I practiced answering behavioral questions like 'Tell me about a time you faced a difficult challenge' by having ChatGPT generate follow-up questions and helping me structure my responses more clearly. It really helped me think through my experiences more systematically.",
    "I found myself relying on GenAI most for practicing behavioral questions and technical explanations. I would ask it to generate follow-up questions to my initial answers, which helped me anticipate what interviewers might ask next. I also used it to help me explain complex technical concepts in simpler terms.",
    "I actually did use GenAI during a live interview once, but it was unintentional. I had been practicing with ChatGPT so much that during the interview, I found myself using some of the language patterns and structures I had practiced. The interviewer seemed impressed with how well I communicated, so it worked out well.",
    "I felt AI gave me a real competitive edge when I was interviewing for a product management role. I used ChatGPT to practice explaining technical concepts to non-technical stakeholders, and during the interview, I was able to clearly articulate complex ideas in a way that impressed the hiring manager. I got the job, and I credit part of that to the AI practice.",
    "I had a close call when I was preparing for an interview at a company that was very strict about AI usage. I had practiced extensively with ChatGPT, and during the interview, I accidentally used some phrasing that was very similar to what the AI had suggested. The interviewer asked if I had used any AI tools, and I had to quickly think on my feet to explain my preparation process honestly without sounding like I was overly dependent on AI.",
    "Looking back, I think I might have crossed a line when I used AI to help me write a cover letter that was almost entirely generated by ChatGPT. I only made minor edits to personalize it, and I felt like I wasn't being authentic. I ended up not getting that job, and I think it's because the cover letter didn't really reflect who I am.",
    "Yes, I have used AI in job applications in ways I prefer not to share openly. I've used it to help me exaggerate some of my achievements and responsibilities in previous roles, making my experience sound more impressive than it actually was. I know this isn't ethical, but I felt like I needed to compete with other candidates who were doing the same thing."
  ]
};

// Helper function to make API calls
async function makeChatRequest(message, step = 0, questionMode = true, currentQuestion = null, predefinedQuestions = [], isFinalQuestionFlag = false, followUpMode = true) {
  try {
    const response = await axios.post(`${BASE_URL}/api/chat`, {
      message,
      step,
      questionMode,
      currentQuestion,
      predefinedQuestions,
      isFinalQuestionFlag,
      followUpMode,
      sessionId: TEST_SESSION_ID
    });
    
    return response.data;
  } catch (error) {
    console.error('❌ API call failed:', error.response?.data || error.message);
    throw error;
  }
}

// Helper function to wait between requests
function delay(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

// Main test function
async function runCompleteUserAgentFlow() {
  console.log('🧪 Starting Complete User Agent Flow Test\n');
  console.log(`📝 Test Session ID: ${TEST_SESSION_ID}\n`);
  
  let currentStep = 0;
  let currentQuestion = null;
  let predefinedQuestions = userResponses.main;
  let isFinalQuestionFlag = false;
  let followUpMode = true;
  
  try {
    // Phase 1: Background Questions
    console.log('🔄 PHASE 1: Background Questions\n');
    console.log('=' .repeat(50));
    
    for (let i = 0; i < userResponses.background.length; i++) {
      const question = userResponses.background[i];
      const userResponse = userResponses.background[i];
      
      console.log(`\n📋 Background Question ${i + 1}: ${question}`);
      console.log(`👤 User Response: ${userResponse.substring(0, 100)}...`);
      
      const response = await makeChatRequest(
        userResponse,
        currentStep,
        true,
        currentQuestion,
        predefinedQuestions,
        isFinalQuestionFlag,
        followUpMode
      );
      
      console.log(`🤖 Bot Response: ${response.bot_response.substring(0, 150)}...`);
      console.log(`📊 Question Completed: ${response.question_completed}`);
      console.log(`🔍 Audit Result: ${response.audit_result ? 'Available' : 'None'}`);
      
      if (response.follow_up_questions) {
        console.log(`❓ Follow-up Questions: ${response.follow_up_questions.length} available`);
      }
      
      currentStep++;
      await delay(1000); // Wait 1 second between requests
    }
    
    // Phase 2: Main Questions
    console.log('\n🔄 PHASE 2: Main Questions\n');
    console.log('=' .repeat(50));
    
    for (let i = 0; i < userResponses.main.length; i++) {
      const question = userResponses.main[i];
      const userResponse = userResponses.main[i];
      isFinalQuestionFlag = (i === userResponses.main.length - 1);
      
      console.log(`\n📋 Main Question ${i + 1}: ${question}`);
      console.log(`👤 User Response: ${userResponse.substring(0, 100)}...`);
      console.log(`🎯 Is Final Question: ${isFinalQuestionFlag}`);
      
      const response = await makeChatRequest(
        userResponse,
        currentStep,
        true,
        currentQuestion,
        predefinedQuestions,
        isFinalQuestionFlag,
        followUpMode
      );
      
      console.log(`🤖 Bot Response: ${response.bot_response.substring(0, 150)}...`);
      console.log(`📊 Question Completed: ${response.question_completed}`);
      console.log(`🔍 Audit Result: ${response.audit_result ? 'Available' : 'None'}`);
      
      if (response.audit_result) {
        console.log(`📈 Audit Scores: ${JSON.stringify(response.audit_result.scores)}`);
        console.log(`✅ Audit Verdict: ${response.audit_result.verdict}`);
      }
      
      if (response.follow_up_questions) {
        console.log(`❓ Follow-up Questions: ${response.follow_up_questions.length} available`);
        
        // Handle follow-up questions if available
        if (response.follow_up_questions.length > 0) {
          console.log(`🔄 Processing follow-up questions...`);
          
          for (let j = 0; j < Math.min(response.follow_up_questions.length, 2); j++) {
            const followUpQuestion = response.follow_up_questions[j];
            const followUpResponse = `This is my detailed response to the follow-up question: ${followUpQuestion}. I want to provide more context and examples to better explain my experience.`;
            
            console.log(`\n  📋 Follow-up ${j + 1}: ${followUpQuestion}`);
            console.log(`  👤 Follow-up Response: ${followUpResponse.substring(0, 80)}...`);
            
            const followUpResult = await makeChatRequest(
              followUpResponse,
              currentStep,
              true,
              followUpQuestion,
              predefinedQuestions,
              isFinalQuestionFlag,
              true
            );
            
            console.log(`  🤖 Follow-up Bot Response: ${followUpResult.bot_response.substring(0, 100)}...`);
            currentStep++;
            await delay(500);
          }
        }
      }
      
      currentStep++;
      await delay(1000);
    }
    
    // Phase 3: Final Summary
    console.log('\n🔄 PHASE 3: Final Summary\n');
    console.log('=' .repeat(50));
    
    const finalMessage = "Thank you for this interview. I've enjoyed sharing my experiences with GenAI tools and how they've helped me in my career. I believe I've been honest about both the benefits and the ethical considerations, and I appreciate the opportunity to reflect on these important topics.";
    
    console.log(`\n📝 Final Message: ${finalMessage.substring(0, 100)}...`);
    
    const finalResponse = await makeChatRequest(
      finalMessage,
      currentStep,
      true,
      currentQuestion,
      predefinedQuestions,
      true,
      false
    );
    
    console.log(`🤖 Final Bot Response: ${finalResponse.bot_response.substring(0, 150)}...`);
    
    // Test Results Summary
    console.log('\n🎉 TEST COMPLETED SUCCESSFULLY!\n');
    console.log('=' .repeat(50));
    console.log(`📊 Total Steps: ${currentStep + 1}`);
    console.log(`📋 Background Questions: ${userResponses.background.length}`);
    console.log(`📋 Main Questions: ${userResponses.main.length}`);
    console.log(`🆔 Session ID: ${TEST_SESSION_ID}`);
    console.log(`⏱️  Test completed at: ${new Date().toISOString()}`);
    
  } catch (error) {
    console.error('\n❌ TEST FAILED:', error.message);
    if (error.response) {
      console.error('Response status:', error.response.status);
      console.error('Response data:', error.response.data);
    }
    throw error;
  }
}

// Run the test
if (import.meta.url === `file://${process.argv[1]}`) {
  runCompleteUserAgentFlow()
    .then(() => {
      console.log('\n✅ Test completed successfully!');
      process.exit(0);
    })
    .catch((error) => {
      console.error('\n❌ Test failed:', error.message);
      process.exit(1);
    });
}

export { runCompleteUserAgentFlow };

